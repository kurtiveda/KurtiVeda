// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address{
  name String
  phone String
  zip Int
  state String
  city String
  street String
}

//* --------------------AUTHENTICATION MODELS------------------------
enum Roles{
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?    
  accounts      Account[]
  sessions      Session[]
  carts Carts[]
  address Address[]
  orders Orders[]
  role          Roles  @default(USER)
  promoUsed Boolean @default(false)
  Active Boolean?

  @@map("users")
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//*------------------- USERS CART MODEL-----------------------
type Products{
  id String
  name String
  price Int
  Quantity Int
  size String
}
enum STATUS{
  PAID
  FAILED
  IN_CART
}
enum DelStatus{
  PENDING
  PROCESSING
  DELIVERED
  EXCHANGE_PROCESSING
  EXCHANGE_DONE
}
type Cart {
  products Products[]
  status STATUS
  delivery Address?
  payment_date DateTime?
  Tr_id String?
  Tr_amt Int?
  del_status DelStatus @default(PENDING)
}
model Carts{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User  @relation(fields: [userId],references: [id]) 
  userId String @db.ObjectId @unique
  cart Cart[]
}

model Orders{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User  @relation(fields: [userId],references: [id]) 
  userId String @db.ObjectId @unique
  orders Cart[]
}